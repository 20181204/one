//什么是进程
系统程序运行的基本单位
//什么是线程
比进程更小的执行单位
共享堆和方法区资源

Executors.newCacheThreadPool()
创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则创建新的线程
Executors cacheThreadPool=Executors.newCacheThreadPool();
for(int i=0;i<100;i++){
    cacheThreadPool.execute(new Runnable(){
        @Override
        public void run(){
            system.out.println(index);
        }
    });
    }
}

线程1执行完毕，线程2会复用线程1的线程

------------------------------------------------------------------------------------------------

Executors.newFixedThreadPool()
创建一个定长的线程，超过数量将在队列中等待,
每当提交一个任务时就创建一个线程，直到线程池达到最大数俩个这是线程池的规模就不再变化，
Executors cacheThreadPool=Executors.newFixedThreadPool();
for(int i=0;i<100;i++){
    final int i=index;
    cacheThreadPool.execute(new Runnable(){
        @Override
        public void run(){
            system.out.println(i);
        }
    });
    }
}
定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()

------------------------------------------------------------------------------------------------

Executors.newScheduledThreadPool(5);
创建一个定长线程池，支持定时以及周期性任务执行

ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);
scheduledThreadPool.schedule(new Runnable() {

@Override
public void run() {
System.out.println("delay 3 seconds");
}
}, 3, TimeUnit.SECONDS);

------------------------------------------------------------------------------------------------

ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
创建一个单线程化线程池，只会使用唯一的线程执行任务，保证所有任务按顺序执行

ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
for (int i = 0; i < 10; i++) {
final int index = i;
singleThreadExecutor.execute(new Runnable() {

@Override
public void run() {
try {
System.out.println(index);
Thread.sleep(2000);
} catch (InterruptedException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
}
});
}
---------------------------------------------------
timer类负责管理延迟任务，在100ms后执行该任务，以及周期任务每10ms执行一次该任务。然而timer存在一些缺陷，因此应该使用
ScheduledThreadPoolExecutor来代替它
Timer在执行定时任务时只会创建 一个线程，如果某个任务执行时间过长，那么将破坏其他的TimerTask的定时准确性，例如
某个周期TimerTasj需要每10ms执行一次，而另外一个TimerTask需要执行40ms那么这个周期任务或者在40ms任务完成后快速
连续的调用4次，或者丢失4次调用，
另一个问题是TimerTask抛出一个未检查的异常，那么timer将表现出糟糕的行为，timer不会捕获异常，并且将终止定时线程
这种情况下timer也不会恢复线程的执行，而是错误的认识整个timer取消了。